else{
plane.seat[i] = board.order[i]
}
if(board.order[100] == plane.seat[100]){
correct.seat = 1
}
}
warnings()
seat.number = seq(1,100,by=1)
board.order = sample(seat.number,replace=FALSE)
plane.seat = rep(0,100)
first.choice = sample(seat.number,1)
plane.seat[1] = first.choice
for(i in 2:100){
if (is.element(board.order[i],plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
while(is.element(seat.choice,plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
}
plane.seat[i] = seat.choice
}
else{
plane.seat[i] = board.order[i]
}
if(board.order[100] == plane.seat[100]){
correct.seat = 1
}
}
board.order
plane.seat
simulations = 10000
correct.seat = rep(0,simulations)
seat.number = seq(1,100,by=1)
board.order = sample(seat.number,replace=FALSE)
plane.seat = rep(0,100)
first.choice = sample(seat.number,1)
plane.seat[1] = first.choice
for(j in 1:simulations){
for(i in 2:100){
if (is.element(board.order[i],plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
while(is.element(seat.choice,plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
}
plane.seat[i] = seat.choice
}
else{
plane.seat[i] = board.order[i]
}
}
if(board.order[100] == plane.seat[100]){
correct.seat[j] = 1
}
}
simulations = 1000
correct.seat = rep(0,simulations)
for(j in 1:simulations){
seat.number = seq(1,100,by=1)
board.order = sample(seat.number,replace=FALSE)
plane.seat = rep(0,100)
first.choice = sample(seat.number,1)
plane.seat[1] = first.choice
for(i in 2:100){
if (is.element(board.order[i],plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
while(is.element(seat.choice,plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
}
plane.seat[i] = seat.choice
}
else{
plane.seat[i] = board.order[i]
}
}
if(board.order[100] == plane.seat[100]){
correct.seat[j] = 1
}
}
mean(correct.seat)
simulations = 1000
correct.seat = rep(0,simulations)
for(j in 1:simulations){
seat.number = seq(1,100,by=1)
board.order = sample(seat.number,replace=FALSE)
plane.seat = rep(0,100)
first.choice = sample(seat.number,1)
plane.seat[1] = first.choice
for(i in 2:100){
if (is.element(board.order[i],plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
while(is.element(seat.choice,plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
}
plane.seat[i] = seat.choice
}
else{
plane.seat[i] = board.order[i]
}
}
if(board.order[100] == plane.seat[100]){
correct.seat[j] = 1
}
}
mean(correct.seat)
simulations = 5000
correct.seat = rep(0,simulations)
for(j in 1:simulations){
seat.number = seq(1,100,by=1)
board.order = sample(seat.number,replace=FALSE)
plane.seat = rep(0,100)
first.choice = sample(seat.number,1)
plane.seat[1] = first.choice
for(i in 2:100){
if (is.element(board.order[i],plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
while(is.element(seat.choice,plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
}
plane.seat[i] = seat.choice
}
else{
plane.seat[i] = board.order[i]
}
}
if(board.order[100] == plane.seat[100]){
correct.seat[j] = 1
}
}
mean(correct.seat)
simulations = 10000
correct.seat = rep(0,simulations)
for(j in 1:simulations){
seat.number = seq(1,100,by=1)
board.order = sample(seat.number,replace=FALSE)
plane.seat = rep(0,100)
first.choice = sample(seat.number,1)
plane.seat[1] = first.choice
for(i in 2:100){
if (is.element(board.order[i],plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
while(is.element(seat.choice,plane.seat) == TRUE){
seat.choice = sample(seat.number,1)
}
plane.seat[i] = seat.choice
}
else{
plane.seat[i] = board.order[i]
}
}
if(board.order[100] == plane.seat[100]){
correct.seat[j] = 1
}
}
mean(correct.seat)
library(readr)
ncaa_team_data <- read_csv("~/Documents/Python/NCAA-March-Madness/ncaa-team-data.csv")
View(ncaa_team_data)
library(readr)
ncaa_team_data <- read_csv("~/Documents/Python/NCAA-March-Madness/ncaa-team-data.csv")
View(ncaa_team_data)
?sample
?rbind
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
3
tickets = rep(0,4)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 & tickets[2] < 3 & tickets[3] < 3 & tickets[4] < 3){
driver = sample(drivers,1)
driver
while(tickets[driver]>=3){
driver = sample(drivers,1)
driver
}
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
tickets
trips = trips + 1
}
tickets = rep(0,4)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
print(driver)
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
print(tickets)
trips = trips + 1
}
?rbinom
tickets = rep(0,4)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
print(driver)
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
print('pulled over')
}
print(tickets)
trips = trips + 1
}
#FiveThirtyEight Riddler Express 5/19/2017
#by Chris Shartrand
simulations = 1000
trips.simulation = rep(0,simulations)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
for (i in 1:simulations){
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
trips = trips + 1
}
trips.simulation[i] = trips
}
days.lasted = mean(trips.simulation)/2
#FiveThirtyEight Riddler Express 5/19/2017
#by Chris Shartrand
simulations = 1000
trips.simulation = rep(0,simulations)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
for (i in 1:simulations){
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
trips = trips + 1
}
trips.simulation[i] = trips
}
days.lasted = mean(trips.simulation)/2
#FiveThirtyEight Riddler Express 5/19/2017
#by Chris Shartrand
simulations = 10000
trips.simulation = rep(0,simulations)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
for (i in 1:simulations){
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
trips = trips + 1
}
trips.simulation[i] = trips
}
days.lasted = mean(trips.simulation)/2
#FiveThirtyEight Riddler Express 5/19/2017
#by Chris Shartrand
#The Ticketed Carpool Problem
simulations = 100000
trips.simulation = rep(0,simulations)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
for (i in 1:simulations){
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
trips = trips + 1
}
trips.simulation[i] = trips
}
days.lasted = mean(trips.simulation)/2
#FiveThirtyEight Riddler Express 5/19/2017
#by Chris Shartrand
#The Ticketed Carpool Problem
simulations = 1000000
trips.simulation = rep(0,simulations)
drivers = c(1,2,3,4)
ticket.probs = c(.1,.15,.2,.25)
for (i in 1:simulations){
tickets = rep(0,4)
trips = 0
while (tickets[1] < 3 | tickets[2] < 3 | tickets[3] < 3 | tickets[4] < 3){
driver = sample(drivers,1)
while(tickets[driver]>=3){
driver = sample(drivers,1)
}
pulled.over = rbinom(1,1,ticket.probs[driver])
if (pulled.over == 1){
tickets[driver] = tickets[driver] + 1
}
trips = trips + 1
}
trips.simulation[i] = trips
}
days.lasted = mean(trips.simulation)/2
library(readr)
full_tourney_data_0216 <- read_csv("~/Documents/Python/NCAA-March-Madness/Data/full-tourney-data-0216.csv")
View(full_tourney_data_0216)
library(readr)
full_tourney_data_0216 <- read_csv("~/Documents/Python/NCAA-March-Madness/Data/full-tourney-data-0216.csv")
View(full_tourney_data_0216)
data = full_tourney_data_0216
train = data[1:911,]
test = data[912:978]
test = data[912:978,]
head(train)
train_reg <- glm(Win~`Efficiency Margin`+`Offensive Efficiency`+`Defensive Efficiency`+`Tempo`+`Luck`
+`Strength of Schedule`+`Opponent Offense`+`Opponenet Defense`+`Non-Conference Strength of Schedule`,
family = binomial(link = "logit"), data=train)
train_reg <- glm(Win~`Efficiency Margin`+`Offensive Efficiency`+`Defensive Efficiency`+`Tempo`+`Luck`
+`Strength of Schedule`+`Opponent Offense`+`Opponnet Defense`+`Non-Conference Strength of Schedule`,
family = binomial(link = "logit"), data=train)
train_reg <- glm(Win~`Efficiency Margin`+`Offensive Efficiency`+`Defensive Efficiency`+`Tempo`+`Luck`
+`Strength of Schedule`+`Opponent Offense`+`Opponent Defense`+`Non-Conference Strength of Schedule`,
family = binomial(link = "logit"), data=train)
summary(train_reg)
train_reg$fitted.values
train$Win[1]
diff_array <- rep(0,911)
diff_array <- rep(0,911)
for(i in 1:911){
temp_win = 0
if (train_reg$fitted.values >= 0.50){
temp_win = 1
}
diff_array[i]  = abs(train$Win[i] - temp_win)
}
warnings()
diff_array <- rep(0,911)
for(i in 1:911){
temp_win = 0
if (train_reg$fitted.values[i] >= 0.50){
temp_win = 1
}
diff_array[i]  = abs(train$Win[i] - temp_win)
}
sum(diff_array)
58/911
summary(train_reg)
table(train$Luck,train$Win)
install.packages("caret")
library(caret)
?train
mod_train <- train(Win~`Efficiency Margin`+`Offensive Efficiency`+`Defensive Efficiency`+`Tempo`+`Luck`
+`Strength of Schedule`+`Opponent Offense`+`Opponent Defense`+`Non-Conference Strength of Schedule`,  d
ata=train, method="glm", family="binomial")
data <- full_tourney_data_0216
train_set <- data[1:911,]
test_set <- data[912:978,]
mod_train <- train(Win~`Efficiency Margin`+`Offensive Efficiency`+`Defensive Efficiency`+`Tempo`+`Luck`
+`Strength of Schedule`+`Opponent Offense`+`Opponent Defense`+`Non-Conference Strength of Schedule`,
data=train_set, method="glm", family="binomial")
warnings()
summary(mod_train)
train_reduced <- glm(Win~+Tempo+Luck+`Strength of Schedule`+`Opponent Offense`+`Opponent Defense`,
family = binomial(link = "logit"), data=train_set)
anova(train_reg,train_reduced,test="Chisq")
?anova
anova(train_reduced,train_reg,test="Chisq")
summary(train_reg) #the coefficient on luck is large but the standard error is not too bad considering the other standard errors
train_null <-glm(Win~1,family = binomial(link = "logit"), data=train_set)
anova(train_null,train_reg,test='Chisq')
attach(train_set)
plot(Luck,Tempo,pch=(Win+1),col=(Win+1))
legend(6,9,c("Win 0","Win 1"),col=c(1,2),pch=c(1,2))
?legend
legend(-0.25,10,c("Win 0","Win 1"),col=c(1,2),pch=c(1,2))
legend(-0.20,15,c("Win 0","Win 1"),col=c(1,2),pch=c(1,2))
attach(train_set)
plot(Luck,Tempo,pch=(Win+1),col=(Win+1))
legend(-0.20,15,c("Win 0","Win 1"),col=c(1,2),pch=c(1,2))
plot(Luck,Tempo,pch=(Win+1),col=(Win+1))
legend(-0.22,15,c("Win 0","Win 1"),col=c(1,2),pch=c(1,2))
library(psc1)
install.packages("pscl")
library(pscl)
pR2(train_reg)
library(MKmisc)
install.packages("MKmisc")
detach(train_set)
library(MKmisc)
HLgof.test(fit = fitted(train_reg), obs = train_set$Win)
?split
?cut\
?cut
min(train_set$Luck)\
min(train_set$Luck)
max(train_set$Luck)
table(cut(train_set,seq(-.233,.177,10)))
table(cut(train_set$Luck,seq(-.233,.177,10)))
?seq
table(cut(train_set$Luck,seq(-.233,.177,by=.05)))
split(train_set,cut(train_set$Luck,seq(-.233,.177,by=.05)))
varImp(train_reg)
?varImp
pred = predict(train_reg, newdata=test_set)
accuracy <- table(pred, test_set[,"Win"])
pred
?predict
test_set[,'Win']
pred = predict(train_reg, newdata=test_set)
test_data <- test_set[,`Efficiency Margin`:`Non-Conference Strength of Schedule`]
test_data <- test_set[,5:13]
test_data
pred = predict(train_reg, newdata=test_set)
pred
pred = predict(train_reg, newdata=test_set,typ='response')
pred
pred_win = rep(0,67)
for (i in 1:67){
if (pred[i] >= 0.50){
pred_win[i] = 1
}
}
accuracy <- table(pred_win, test_set[,4])
length(pred_win)
length(test_set[,4])
vals = test_set[,4]
pred2 = predict(train_reg, newdata=test_data,typ='response')
pred2
accuracy <- table(pred_win, win_2016)
win_2016 = test_set[,4]
accuracy <- table(pred_win, win_2016)
len(win_2016)
length(win_2016)
win_2016 = as.array(test_set[,4])
win_2016 = test_set$Win
accuracy <- table(pred_win, win_2016)
sum(diag(accuracy))/sum(accuracy)
pred_win
win_2016
setwd('/Users/cshartrand/Documents/Python/NCAA-March-Madness/data')
data <- read.csv('full_tourney_data_0216')
data <- read.csv('full_tourney_data_0216.csv')
data <- read.table('full_tourney_data_0216.csv',sep=',')
getwd()
data <- read.table('full-tourney-data-0216.csv',sep=',')
data <- read.csv('full-tourney-data-0216.csv')
train_set <- data[1:911,]
test_set <- data[912:978,]
train_reg <- glm(Win~`Efficiency Margin`+`Offensive Efficiency`+`Defensive Efficiency`+`Tempo`+`Luck`
+`Strength of Schedule`+`Opponent Offense`+`Opponent Defense`+`Non-Conference Strength of Schedule`,
family = binomial(link = "logit"), data=train_set)
train_set
train_reg <- glm(Win~Efficiency.Margin+Offensive.Efficiency+Defensive.Efficiency+Tempo+Luck
+Strength.of.Schedule+Opponent.Offense+Opponent.Defense+Non.Conference.Strength.of.Schedule,
family = binomial(link = "logit"), data=train_set)
summary(train_reg) #the coefficient on luck is large but the standard error is not too bad considering the other standard errors
data_2 = read.csv('full-tourney-data-0217.csv')
train_2 <- data[1:978,]
test_2 <- data[978:1045,]
train_reg2 <- glm(Win~Efficiency.Margin+Offensive.Efficiency+Defensive.Efficiency+Tempo+Luck
+Strength.of.Schedule+Opponent.Offense+Opponent.Defense+Non.Conference.Strength.of.Schedule,
family = binomial(link = "logit"), data=train_2)
summary(train_reg2)
train_reg3 <- glm(Win~Efficiency.Margin+Offensive.Efficiency+Defensive.Efficiency+Tempo+Luck
+Strength.of.Schedule+Opponent.Offense+Opponent.Defense+Non.Conference.Strength.of.Schedule,
family = binomial(link = "logit"), data=data2)
train_reg3 <- glm(Win~Efficiency.Margin+Offensive.Efficiency+Defensive.Efficiency+Tempo+Luck
+Strength.of.Schedule+Opponent.Offense+Opponent.Defense+Non.Conference.Strength.of.Schedule,
family = binomial(link = "logit"), data=data_2)
summary(train_reg3)
e^-11111111
exp(-1999999)
exp(-.99)
